/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(optimize_c.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(dd5975aefbd2c77a7bbf7a1bf2d36951)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <iqbalance/optimize_c.h>
// pydoc.h is automatically generated in the build directory
#include <optimize_c_pydoc.h>

void bind_optimize_c(py::module& m)
{

    using optimize_c    = ::gr::iqbalance::optimize_c;


    py::class_<optimize_c, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<optimize_c>>(m, "optimize_c", D(optimize_c))

        .def(py::init(&optimize_c::make),
           py::arg("period") = 0,
           D(optimize_c,make)
        )
        




        
        .def("set_period",&optimize_c::set_period,       
            py::arg("period"),
            D(optimize_c,set_period)
        )


        
        .def("period",&optimize_c::period,       
            D(optimize_c,period)
        )


        
        .def("mag",&optimize_c::mag,       
            D(optimize_c,mag)
        )


        
        .def("phase",&optimize_c::phase,       
            D(optimize_c,phase)
        )


        
        .def("reset",&optimize_c::reset,       
            D(optimize_c,reset)
        )


        
        .def("forecast",&optimize_c::forecast,       
            py::arg("noutput_items"),
            py::arg("ninput_items_required"),
            D(optimize_c,forecast)
        )


        
        .def("work",&optimize_c::work,       
            py::arg("noutput_items"),
            py::arg("input_items"),
            py::arg("output_items"),
            D(optimize_c,work)
        )

        ;




}








